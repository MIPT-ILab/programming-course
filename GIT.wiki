#summary Инструкция по использованию GIT для сдачи заданий.

= _Пока что у Вас нету прав на запись в репозиторий. Они появятся вместе с индивидуальными папками. Мы уже работаем над этим_ =

= Что такое GIT? =

GIT - это система организации совместного доступа и контроля версий к файлам проекта.

Контроль версий означает, что в репозитории (на сервере) будут храниться все версии программы, которые вы туда отправляли. При желании их можно будет сравнивать, восстанавливать, объединять в случае ошибок.

Совместный доступ означает, что несколько человек (а в случае крупных компаний и сотни человек), одновременно пишущих большой проект, будут иметь доступ к общей версии исходников программы: смогут независимо друг-от-друга их редактировать, отправлять их на сервер и быть в курсе всех, даже самых последних изменений. В случае возникновения конфликтующих изменений (2 человека одновременно внесли изменения в один и тот же файл, к примеру), система контроля версий поможет их разрешить.

Подробнее о всем этом можно почитать в множестве руководств на просторах интернета, а пока что необходимо научиться базовой работе с GIT.
  
= Если у вас Windows =
== Установка GIT ==
Как и принято в Windows, программу можно установить методом "далее-далее-я принимаю условия лицензионного соглашения-готово".

Скачайте программу GIT для Windows [http://code.google.com/p/msysgit/downloads/list отсюда]. 

Скачайте программу для графического просмотра изменений в версиях файла [http://sourceforge.net/projects/kdiff3/files/kdiff3/0.9.97/KDiff3-32bit-Setup_0.9.97.exe/download отсюда]

Скачайте графический интерфейс для работы с GIT [http://sourceforge.net/projects/gitextensions/files/latest/download отсюда].

Запустите Git Extensions. Если вы сделали все правильно, то увидите такое окно:
[http://wiki.mipt-ilab-course.googlecode.com/git/git_extensions_ok.png]

== Настройка Git Extensions ==

Как несложно догадаться, для начала необходимо заполнить единственный красный пункт, а именно свое имя и email. Там же необходимо оставить значение по-умолчанию о том, конец строки необходимо забирать в стиле windows, а отправлять в стиле linux, а также установить кодировку файлов в utf-8. Это необходимо для того, чтобы облегчить жизнь и вам, и менторам.
[http://wiki.mipt-ilab-course.googlecode.com/git/git_extensions_set_utf8.png]

После этого можно смело нажать ОК и перед вами откроется основное окно Git Extensions. В этом окне необходимо выбрать пункт _клонировать репозиторий_ и перед вами откроется окно настройки репозитория.
[http://wiki.mipt-ilab-course.googlecode.com/git/git_extensions_set_repo.png]
В поле _репозиторий_ необходимо вписать 'https://code.google.com/p/mipt-ilab-course/'.
В поле _назначение_ необходимо вписать адрес папки, в которую будет клонирован ваш репозиторий, т.е. внутри которой будет создан каталог для вашей работы. *Не рекомендуется* указывать там _Рабочий стол_.
В поле _ветвь_ необходимо выбрать students-develop. Обратите внимание на то, что, если вы правильно выполнили предыдущие пункты, то вам будет предложен список ветвей, которые возможно выбрать.
Теперь жмем _клонировать_ и ждем успешного клонирования. В процессе клонирования с Вас могут потребовать имя пользователя и пароль.
Имя пользователя - это ваш гугл-аккаунт. *ВНИМАНИЕ!, пароль пользователя - это не пароль от вашего google-аккаунта.* Свой пароль для репозитория Вы *должны взять [https://code.google.com/hosting/settings отсюда].* 

Теперь все подготовительные стадии закончены и Вы можете приступить к выполнению домашнего задания.

== Работа с репозиторием ==

Ура! Приступаем к работе! Итак, необходимо перейти в Вашу папку репозитория. Да, пока что ее нету, но скоро появиться персональная папка для каждого студента, в которую и только в которую у него будет доступ. А пока _мы трудимся изо всех сил, чтобы эти папки поскорее появились_, допустим, что эти папки существуют. Для начала необходимо написать хоть какую-то программу и сохранить ее исходный код в собственной папке. После этого прямо в проводнике необходимо щелкнуть правой кнопкой мыши по файлу и в контекстном меню выбрать 'git extensions->add file'.

[http://wiki.mipt-ilab-course.googlecode.com/git/git_extensions_add_file.png]

С помощью аналогичных пунктов контекстного меню можно смотреть текущие изменения файла с момента последней версии, посмотреть историю изменений файла, а также сделать еще много полезных вещей. Но сейчас самое главное - отправка изменений на сервер.

Перед тем как отправлять что-либо на сервер необходимо забрать из репозитория последнюю версию своих файлов. Ведь в то время, пока вы редактировали код, ваш ментор мог его изменить, оставив в нем свои комментарии. Для этого необходимо все в том же контекстном меню выбрать пункт 'git extensions->Pull'. Перед Вами откроется меню параметров pull, где Вам предложат 3 варианта действий в случае конфликтующих изменений. Попробуйте разобраться, чем же они отличаются друг-от-друга и выбрать наиболее подходящий.

[http://wiki.mipt-ilab-course.googlecode.com/git/git_extensions_pull_menu.png]

Перед отправкой своих файлов/изменений на сервер, необходимо сначала внести эти файлы/изменения в локальный репозиторий у себя на компьютере. Для этого все в том же контекстном меню выбираем 'GitEx commit'. Перед Вами откроется меню коммита, где можно будет наглядно посмотреть все изменения, которые вы внесли в репозиторий. На скриншоте я добавил новый файл main.cpp, а также одну строчку в файл test.cpp. Каждый коммит должен сопровождаться комментарием, сообщающий о том, что же было сделано с момента предыдущего коммита. Его необходимо вписать в правом нижнем углу окна.
[http://wiki.mipt-ilab-course.googlecode.com/git/git_extensions_commit.png].
После этого можно нажать кнопку 'Commit'. После нескольких подобных коммитов приходит пора отправить свои изменения на сервер,  поделившись ими с ментором. Для этого все в том же контекстном меню выберете пункт 'GitExt->Push'. Если до этого у Вас еще не спрашивали логин и пароль, то теперь-то его точно спросят.
Ура! Ваша программа попала на сервер и теперь ментор сможет ее проверить.

= Если у вас Linux =
Если вы используете линукс, то наверняка понимаете, насколько же неудобны сложные графические интерфейсы, усложняющие простые вещи. 

Также, если Вы пользуетесь линуксом, то я считаю, что вы сможете понять, как адаптировать написанное ниже _и не предназначенное для студентов 1 курса_ для сдачи заданий в репозиторий mipt-ilab-course. Безусловно, для этого Вам придется прочитать инструкцию для пользователей Windows. При возникновении вопросов - пишите. В случае необходимости вики будет дополнена.

== Quick start ==

First you should set your username and email:
{{{
$ git config --global user.name "Name Surname"
$ git config --global user.email your_email@gmail.com
}}}
*If you will be asked for password you should use password from [https://code.google.com/hosting/settings here], NOT from your google account!*

And to your notice you may [http://git-scm.com/book/en/Getting-Started-First-Time-Git-Setup customise git as you want]

The main git command is
{{{
$ git help <verb>
}}}

Now you may clone our repository.
{{{
$ git clone https://username@code.google.com/p/galaxy-expansion/ 
}}}

Next you should switch to develop branch (few moments later about branches)
{{{
$ git checkout develop
}}}

Create branch for your feature
{{{
$ git branch new_feature
}}}

Code a lot, add and delete files and, of course, commit to your personal branch using svn-like syntax:
{{{
$ git add file_or_folder
$ git rm file_or_folder
$ git commit -m "bla-bla-bla, it's historical commit"
}}}

When your feature is ready you should
  # switch to develop branch (I hope, you remember how to do this;))
  # merge your branch with develop (<u>don't forget about --no-ff, it's needed to save history</u>)
{{{
$ git merge --no-ff new_feature
}}}
  # solve conflicts if needed (intuitively answer the questions)
  # delete your new_future branch and don't panic, it's already in history
{{{
$ git branch -d new_feature
}}}
  # and send it to the main repository
{{{
$ git push develop
}}}

Note, before pushing develop branch <u> you should send your code for reviewing </u>(see the code review wiki page).

That's all that you need to start:)

== More about branching ==
Of course, you may use local new-feature sub-branches but be careful! It's easy to lost your control.
You may push your local branches to the main repo without merging for reviewing.
And [http://nvie.com/posts/a-successful-git-branching-model/ here] you may read more about branching. This web-page is our main branching convention. Picture above is amazing illustration.
[http://wiki.galaxy-expansion.googlecode.com/git/img/branching.png]