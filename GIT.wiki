#summary Инструкция по использованию GIT для сдачи заданий.
= Что такое GIT? =
GIT - это система организации совместного доступа и контроля версий к файлам проекта.

Контроль версий означает, что в репозитории (на сервере) будут храниться все версии программы, которые вы туда отправляли. При желании их можно будет сравнивать, восстанавливать, объединять в случае ошибок.

Совместный доступ означает, что несколько человек (а в случае крупных компаний и сотни человек), одновременно пишущих большой проект, будут иметь доступ к общей версии исходников программы: смогут независимо друг-от-друга их редактировать, отправлять их на сервер и быть в курсе всех, даже самых последних изменений. В случае возникновения конфликтующих изменений (2 человека одновременно внесли изменения в один и тот же файл, к примеру), система контроля версий поможет их разрешить.

Подробнее о всем этом можно почитать в множестве руководств на просторах интернета, а пока что необходимо научиться базовой работе с GIT.
  
= Если у вас Windows =
== Установка GIT ==
Как и принято в Windows, программу можно установить методом "далее-далее-я принимаю условия лицензионного соглашения-готово".

Скачайте программу GIT для Windows [http://code.google.com/p/msysgit/downloads/list отсюда]. 

Скачайте программу для графического просмотра изменений в версиях файла [http://sourceforge.net/projects/kdiff3/files/kdiff3/0.9.97/KDiff3-32bit-Setup_0.9.97.exe/download отсюда]

Скачайте графический интерфейс для работы с GIT [http://sourceforge.net/projects/gitextensions/files/latest/download отсюда].

Запустите Git Extensions. Если вы сделали все правильно, то увидите такое окно:
[http://wiki.mipt-ilab-course.googlecode.com/git/git_extensions_ok.png]

== Настройка Git Extensions ==



= Если у вас Linux =
Если вы используете линукс, то наверняка понимаете, насколько же неудобны сложные графические интерфейсы, усложняющие простые вещи.

 




= Quick start =

First you should set your username and email:
{{{
$ git config --global user.name "Name Surname"
$ git config --global user.email your_email@gmail.com
}}}
*If you will be asked for password you should use password from [https://code.google.com/hosting/settings here], NOT from your google account!*

And to your notice you may [http://git-scm.com/book/en/Getting-Started-First-Time-Git-Setup customise git as you want]

The main git command is
{{{
$ git help <verb>
}}}

Now you may clone our repository.
{{{
$ git clone https://username@code.google.com/p/galaxy-expansion/ 
}}}

Next you should switch to develop branch (few moments later about branches)
{{{
$ git checkout develop
}}}

Create branch for your feature
{{{
$ git branch new_feature
}}}

Code a lot, add and delete files and, of course, commit to your personal branch using svn-like syntax:
{{{
$ git add file_or_folder
$ git rm file_or_folder
$ git commit -m "bla-bla-bla, it's historical commit"
}}}

When your feature is ready you should
  # switch to develop branch (I hope, you remember how to do this;))
  # merge your branch with develop (<u>don't forget about --no-ff, it's needed to save history</u>)
{{{
$ git merge --no-ff new_feature
}}}
  # solve conflicts if needed (intuitively answer the questions)
  # delete your new_future branch and don't panic, it's already in history
{{{
$ git branch -d new_feature
}}}
  # and send it to the main repository
{{{
$ git push develop
}}}

Note, before pushing develop branch <u> you should send your code for reviewing </u>(see the code review wiki page).

That's all that you need to start:)

= More about branching =
Of course, you may use local new-feature sub-branches but be careful! It's easy to lost your control.
You may push your local branches to the main repo without merging for reviewing.
And [http://nvie.com/posts/a-successful-git-branching-model/ here] you may read more about branching. This web-page is our main branching convention. Picture above is amazing illustration.
[http://wiki.galaxy-expansion.googlecode.com/git/img/branching.png]