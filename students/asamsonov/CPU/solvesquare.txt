in ax
in bx
in cx
push ax
push 0
jne :1
:0
push bx
push cx
or
push 0
je :2 
push bx
push cx
not
or
push 0
je :3 
push 1
pop dx
out dx
push 0
push cx
sub 
push bx
div 
pop dx
out dx
jmp :4 
:1
push bx
dub
mul
push 4
push ax
push cx
mul
mul  
sub 
pop dx 
push dx
push 0
jb :3 
push dx
push 0
je :5
push dx
sqrt
pop dx 
push 2
pop cx
out cx 
push 0
push bx
sub 
push dx
add 
push 2
push ax
mul 
div 
push bx
push dx
add 
push 0
push 2
push ax
mul 
sub 
div 
out 
jmp :4
:5 
push ax
push bx
push 2
div
pop cx
pop bx
jmp :0 
:2 
push -1
pop dx
out dx 
jmp :4
:3 
push 0
pop dx
out dx 
jmp :4
:4 
end