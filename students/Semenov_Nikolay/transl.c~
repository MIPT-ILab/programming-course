#include<stdio.h>
#include<stdlib.h>
#include<assert.h>

#define CMD_SIZE 5
#define REG_SIZE 2

int main()
{
	//Open ASM_in for reading
	// Open ASM_out for writing
/*-------------------------------------------------
Add assert, to check command name!
-------------------------------------------------*/
	char cmd[CMD_SIZE] ;
	char reg[REG_SIZE]
	int cmd_n, check, val, reg_n ;
	
	while(EOF)
	{
		scanf("%s", &cmd);
		if(cmd[1] == 'U') cmd_n = 0  ; //Push 
		if(cmd[1] == 'O') cmd_n = 1  ; //Pop
		if(cmd[1] == 'D') cmd_n = 2  ; //Add
		if(cmd[1] == 'U') cmd_n = 3  ; //Mul
		if(cmd[1] == 'M') cmd_n = 4  ; //JMP
		if(cmd[1] == 'B') cmd_n = 5  ; //JBE
		if(cmd[0] == ':') cmd_n = 6  ; // :
		if(cmd[1] == 'N') cmd_n = 7  ; //End

		switch(cmd_n)
		{
			case 0: check = scanf("%d", val) ;
				switch(check)
				{
					case 0: printf(" 0 %d", val) ; //PUSH VALUE
						break ;
					case 1: scanf("%s", &reg) ;
						if(reg[0] == 'A') reg_n = 0 ; //AX
						if(reg[0] == 'B') reg_n = 1 ; //BX
						if(reg[0] == 'C') reg_n = 2 ; //CX	
						if(reg[0] == 'D') reg_n = 4 ; //DX
						printf(" 1 %d", reg_n); //PUSH REG
						break ;
					default: assert('Push's dropped' == 0) ;
				} 
				break ;
			case 1: scanf("%s", &reg) ;
				if(reg[0] == 'A') reg_n = 0 ; //AX
				if(reg[0] == 'B') reg_n = 1 ; //BX
				if(reg[0] == 'C') reg_n = 2 ; //CX	
				if(reg[0] == 'D') reg_n = 4 ; //DX
				printf(" 2 %d", reg_n); //POP
				break ;
			case 2: printf(" 3 ") ; break ;
			case 3: printf(" 4 ") ; break ;
			case 4: scanf("%d", &val) ;
				printf(" 5 %d", val) ; //JMP
				break ;
			case 5: scanf("%d", &val) ;
				printf(" 6 %d", val) ; //JBE 
				break ;
			case 7: printf(" 37 %c", cmd[2]) ; //:LABEL
				break ;
			case 8: printf(" 8 ") ; //END
				break ;
			default: assert('Wrong argument' == 0) ;
		}   
	}
	return 0;
}
